<!DOCTYPE html>
<html translate="no" data-dpr="1" style="font-size: 40px;">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="robots" content="noindex,nofollow">
    <meta content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" name="viewport">
    <title>Blue Dollar</title>
    <link rel="modulepreload" crossorigin="" href="/assets/js/page-home-71e7476c.js">


    <link href="/css/wallet/main.css" rel="stylesheet" />
    <link href="/css/wallet/chunk_2-1.css" rel="stylesheet" />
    <link href="/css/wallet/chunk_2-2.css" rel="stylesheet" />
    <link href="/css/wallet/chunk_2-3.css" rel="stylesheet" />
    <link rel="shortcut icon" href="/images/bitbug_favicon.ico" type="image/x-icon">
   


<style>
    /* Bet History Table Styles */
    .history-title {
            border-bottom: 1px solid #eee;
            margin-bottom: 0.2rem;
        }
        .table-responsive {
            width: 100%;
            overflow-x: auto; /* Enable horizontal scroll if needed */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            margin-bottom: .3rem;
        }
        .bet-history-table {
            width: 100%;
            min-width: 600px; /* Force minimum width for better layout, triggers scroll */
            font-size: 0.32rem; /* Adjust font size as needed (12px approx) */
            border-collapse: collapse;
        }
        .bet-history-table th,
        .bet-history-table td {
            padding: .2rem .15rem; /* Adjust padding */
            text-align: center;
            border-bottom: 1px solid #f0f0f0;
            white-space: nowrap; /* Prevent text wrapping */
            vertical-align: middle;
        }
        .bet-history-table th {
            font-weight: 500;
            background-color: #f8f9fa; /* Light header background */
            color: #666;
        }
        .bet-history-table tbody tr:last-child td {
            border-bottom: none;
        }

        /* Text color classes (adjust to match your theme) */
        .text-success { color: #28a745; }
        .text-danger { color: #dc3545; }
        .text-warning { color: #ffc107; }
        .text-primary { color: #007bff; }
        .text-muted { color: #6c757d; }
        .font-weight-bold { font-weight: bold; }

        /* Badge styles (simple versions) */
        .badge {
            display: inline-block;
            padding: .2em .5em;
            font-size: 85%;
            font-weight: 500;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: .2rem;
            color: #fff;
        }
        .badge-primary { background-color: #0d6efd; } /* Dragon */
        .badge-danger { background-color: #dc3545; } /* Tiger */
        .badge-success { background-color: #198754; } /* Tie */

        /* Pagination Styles (simple) */
        .pagination {
             display: flex;
             padding-left: 0;
             list-style: none;
             justify-content: center; /* Center pagination */
        }
        .page-item {
             margin: 0 .1rem; /* Space between items */
        }
        .page-item.disabled .page-link {
             color: #6c757d;
             pointer-events: none;
             background-color: #fff;
             border-color: #dee2e6;
        }
        .page-item.active .page-link {
             z-index: 3;
             color: #fff;
             background-color: #861657; /* Use your theme's active color */
             border-color: #861657;
        }
        .page-link {
             position: relative;
             display: block;
             padding: .15rem .3rem; /* Adjust padding */
             font-size: 0.32rem; /* Adjust font size */
             color: #861657; /* Use your theme's link color */
             text-decoration: none;
             background-color: #fff;
             border: 1px solid #dee2e6;
             border-radius: .2rem; /* Rounded corners */
             transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
         .page-link:hover {
             z-index: 2;
             color: #0a58ca;
             background-color: #e9ecef;
             border-color: #dee2e6;
         }
         .page-link:focus {
            z-index: 3;
            outline: 0;
            box-shadow: 0 0 0 .25rem rgba(13,110,253,.25); /* Optional focus style */
         }

         /* Vant Loading Small Size */
         .van-loading--sm .van-loading__spinner {
             width: .5rem;
             height: .5rem;
         }
</style>
</head>

<body style="font-size: 12px;">
    <div id="app">
        <div data-v-3966082f="" class="mian">
            <div data-v-106b99c8="" data-v-3966082f="" class="navbar">
                <div data-v-106b99c8="" class="navbar-left" onclick="location.href='/home'">
                    <div data-v-106b99c8="" class="bank c-row c-row-middle-center">
                        <img data-v-106b99c8="" src="/images/back.c3244ab0.png" class="navbar-back">
                    </div>
                </div>
                <div data-v-106b99c8="" class="navbar-title">Bet History</div>
                <div data-v-106b99c8="" class="navbar-right"></div>
            </div>

            <!-- Content Box -->
            <div data-v-3966082f="" class="box">
                <div class="list" id="betHistoryContainer" data-v-3966082f="">
                    <h4 class="history-title">Betting History (Dragon Tiger)</h4>
                    <div class="table-responsive">
                        <table class="bet-history-table">
                            <thead>
                                <tr>
                                    <th>Round</th>
                                    <th>Bet On</th>
                                    <th>Bet Amt</th>
                                    <th>Result</th>
                                    <th>Win/Loss</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody id="dragonTigerHistoryTableBody">
                                <tr>
                                    <td colspan="6" class="text-center" style="padding: 1rem 0; color: #969799; font-size: 0.37rem;">Loading User Info...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div id="dragonTigerHistoryLoading" style="display: none; text-align: center; padding: .5rem 0; background-color: #fff;">
                         <div data-v-7692a079="" class="van-loading van-loading--circular van-loading--sm" style="color: #fb4e4e;">
                            <span data-v-7692a079="" class="van-loading__spinner van-loading__spinner--circular">
                                 <svg data-v-7692a079="" viewBox="25 25 50 50" class="van-loading__circular">
                                    <circle data-v-7692a079="" cx="50" cy="50" r="20" fill="none"></circle>
                                </svg>
                            </span>
                        </div>
                    </div>
                    <nav aria-label="Page navigation">
                      <ul class="pagination" id="dragonTigerHistoryPagination">
                       
                      </ul>
                    </nav>
                </div>
            </div>
        </div> 
    </div> 

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/js/client.js"></script>
    <script src="/DragonTiger/assets/js/script.js"></script>

    <script>
    // ==================================================
    // Dragon Tiger Bet History Loading Script (bethistory Page)
    // Using mechanism similar to DragonTiger.ejs (fetching user info first)
    // ==================================================
    $(document).ready(function() {

        const itemsPerPage = 10;
        let historyCurrentPage = 1; // Keep track of the current page
        let historyIsLoading = false;
        let historyTotalPages = 1;
        let historyUserPhone = null; // Store phone number globally for this page

        // --- DOM Element References (Get them once) ---
        const historyTableBody = $('#dragonTigerHistoryTableBody');
        const historyLoadingIndicator = $('#dragonTigerHistoryLoading');
        const historyPaginationContainer = $('#dragonTigerHistoryPagination');

        // --- Helper Functions (Keep these consistent with DragonTiger.ejs) ---
        function formatDate(timestamp) { if (!timestamp) return 'N/A'; try { const d=new Date(timestamp); const h=('0'+d.getHours()).slice(-2); const m=('0'+d.getMinutes()).slice(-2); const s=('0'+d.getSeconds()).slice(-2); return `${h}:${m}:${s}`; } catch(e){return 'Date Err';} }
        function formatBetCard(card) { if (!card) return 'N/A'; card = card.toLowerCase(); if (card === 'dragon') return '<span class="badge badge-primary">D</span>'; if (card === 'tiger') return '<span class="badge badge-danger">T</span>'; if (card === 'tie') return '<span class="badge badge-success">Tie</span>'; return card; }
        function formatResult(result) { if (!result || result === 'pending') return '<span class="text-warning">-</span>'; result = result.toLowerCase(); if (result === 'dragon') return '<span class="text-primary font-weight-bold">D</span>'; if (result === 'tiger') return '<span class="text-danger font-weight-bold">T</span>'; if (result === 'tie') return '<span class="text-success font-weight-bold">Tie</span>'; return result; }
        function formatWinLossAmount(item) { if (!item || item.result === 'pending') { return '<span class="text-muted">-</span>'; } const wa=Number(item.win_amount); const ba=Number(item.amount); return wa > 0 ? `<span class="text-success font-weight-bold">+${wa.toFixed(2)}</span>` : `<span class="text-danger font-weight-bold">-${ba.toFixed(2)}</span>`; }

        // --- Function to Render Bet History Table ---
        function renderBetHistoryTable(list) {
             historyTableBody.empty();
             if (!list || list.length === 0) { historyTableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #969799; font-size: 0.37rem;">No Bet History Found</td></tr>'); return; }
             $.each(list, function(index, item) {
                 const winLossHtml = formatWinLossAmount(item); const resultHtml = formatResult(item.result); const betCardHtml = formatBetCard(item.card);
                 const betAmount = Number(item.amount || 0).toFixed(2); const timeFormatted = formatDate(item.created_at);
                 var rowHtml = `<tr><td>${item.roundId || 'N/A'}</td><td>${betCardHtml}</td><td>${betAmount}</td><td>${resultHtml}</td><td>${winLossHtml}</td><td>${timeFormatted}</td></tr>`;
                 historyTableBody.append(rowHtml);
             });
        }

        // --- Function to Render Pagination ---
         function renderPagination(paginationData) {
             historyPaginationContainer.empty();
             if (!paginationData || paginationData.totalPages <= 1) return;
             const currentPage = paginationData.currentPage; historyTotalPages = paginationData.totalPages; // Update global total pages
             let prevDisabled = currentPage === 1 ? 'disabled' : '';
             historyPaginationContainer.append(`<li class="page-item ${prevDisabled}"><a class="page-link dt-page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">«</a></li>`);
             historyPaginationContainer.append(`<li class="page-item disabled"><span class="page-link" style="color: #333; background: #f0f0f0; border-color: #ddd;">${currentPage} / ${totalPages}</span></li>`);
             let nextDisabled = currentPage === totalPages ? 'disabled' : '';
             historyPaginationContainer.append(`<li class="page-item ${nextDisabled}"><a class="page-link dt-page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">»</a></li>`);
             // Event listener attached below (outside this function) to avoid duplicates
         }

        // --- Function to Fetch Bet History Data via AJAX ---
        function fetchBetHistory(page = 1) {
            // **Crucial Check:** Ensure we have the phone number before proceeding
            if (!historyUserPhone) {
                 console.error("Cannot fetch history: User phone number not available.");
                 historyTableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #dc3545; font-size: 0.37rem;">Error: User phone missing. Cannot load history.</td></tr>');
                 historyLoadingIndicator.hide();
                 historyPaginationContainer.empty();
                 return;
            }

            if (historyIsLoading) return; // Prevent multiple simultaneous requests
            historyIsLoading = true;
            historyCurrentPage = page; // Update current page state

            loadingIndicator.show();
            // Only show "Loading..." text on initial page load or when table is empty
            if (page === 1 || historyTableBody.children().length === 0) {
                 tableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #969799; font-size: 0.37rem;">Loading Bet History...</td></tr>');
            }
            paginationContainer.empty(); // Clear pagination during load

            // *** Using the API endpoint WITH the fetched phone number ***
            const apiUrl = `/api/betting-history/${historyUserPhone}?page=${page}&limit=${itemsPerPage}`;
            console.log("Fetching history from:", apiUrl);

            $.ajax({
                url: apiUrl,
                type: 'GET',
                dataType: 'json',
                // Auth headers/cookies are assumed handled by client.js or browser
                success: function(response) {
                    console.log("History API Response:", response);
                    // Check structure based on your API
                    let historyData = null;
                    let paginationData = null;

                    if (response && Array.isArray(response.data) && response.pagination) {
                        historyData = response.data;
                        paginationData = response.pagination;
                    }
                    // Add other structure checks if needed

                    if (historyData) {
                        renderBetHistoryTable(historyData);
                        renderPagination(paginationData);
                    } else if (response && Array.isArray(response.data) && response.data.length === 0) {
                        renderBetHistoryTable([]);
                        renderPagination(null);
                    } else {
                        console.error("History API Error:", response.error || "Unexpected response format.");
                        historyTableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #ffc107; font-size: 0.37rem;">Could not load history or no records found.</td></tr>');
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error("AJAX Error fetching bet history:", textStatus, errorThrown, jqXHR.status, jqXHR.responseText);
                    let errorMsg = 'Failed to load history.';
                     if(jqXHR.status === 401) { errorMsg = 'Please log in to view history.'; }
                     else if (jqXHR.status === 404) { errorMsg = 'Error: History API endpoint not found.'; }
                     else if (jqXHR.status === 500) { errorMsg = 'Server error. Please try again later.';}
                     else if (jqXHR.status === 400) { errorMsg = 'Error: Invalid request.';}
                    historyTableBody.html(`<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #dc3545; font-size: 0.37rem;">${errorMsg} (Status: ${jqXHR.status})</td></tr>`);
                },
                complete: function() {
                     historyIsLoading = false; // Reset loading flag
                     loadingIndicator.hide();
                     // Re-enable pagination buttons after load finishes (if needed, though disable logic handles it)
                     // renderPagination({ currentPage: historyCurrentPage, totalPages: historyTotalPages });
                }
            });
        }

         // --- Fetch User Info (to get phone number) ---
         async function fetchInitialUserInfoAndHistory() {
             // Use the correct User Info API endpoint for your application
             const userInfoApiUrl = '/api/webapi/GetUserInfo'; // Use the same URL as DragonTiger.ejs
             const tableBody = $('#dragonTigerHistoryTableBody'); // Reference table body for errors
             const loadingIndicator = $('#dragonTigerHistoryLoading'); // Reference loading indicator

             loadingIndicator.show(); // Show loading indicator
             tableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #969799; font-size: 0.37rem;">Loading User Info...</td></tr>');

             try {
                 const response = await fetch(userInfoApiUrl, {
                     method: 'GET',
                     headers: { 'Content-Type': 'application/json' },
                     // Cookies/Auth assumed to be sent automatically
                 });

                 if (response.ok) {
                     const result = await response.json();
                     if (result && result.status === true && result.data && result.data.phone_user) {
                         console.log("User Info Received, Phone:", result.data.phone_user);
                         historyUserPhone = result.data.phone_user; // STORE THE PHONE NUMBER GLOBALLY
                         // Now fetch the history using the obtained phone number
                         fetchBetHistory(1); // Fetch the first page of history
                     } else {
                         console.error("User Info API Error:", result.message || "Phone number not found in response.");
                         tableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #dc3545; font-size: 0.37rem;">Error: Could not get user information.</td></tr>');
                         loadingIndicator.hide();
                     }
                 } else {
                     console.error('User Info API Error:', response.status, await response.text());
                      let errorMsg = 'Error: Could not fetch user details.';
                      if (response.status === 401) errorMsg = 'Please log in first.';
                     tableBody.html(`<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #dc3545; font-size: 0.37rem;">${errorMsg}</td></tr>`);
                     loadingIndicator.hide();
                 }
             } catch (error) {
                 console.error('Fetch User Info Error (catch block):', error);
                 tableBody.html('<tr><td colspan="6" class="text-center" style="padding: 1rem 0; color: #dc3545; font-size: 0.37rem;">Error connecting to fetch user info.</td></tr>');
                 loadingIndicator.hide();
             }
         }

        // --- Event Listener for Pagination (Attached Once) ---
        historyPaginationContainer.on('click', '.dt-page-link', function(e) {
             e.preventDefault();
             // Check if the parent li is disabled or if already loading
             if ($(this).parent().hasClass('disabled') || historyIsLoading) {
                 return;
             }
             const page = $(this).data('page');
             fetchBetHistory(page); // Fetch the clicked page
         });

        // --- Initial Load ---
        fetchInitialUserInfoAndHistory(); // Start by fetching user info

    }); // End of $(document).ready()
    </script>

</body>
</html>